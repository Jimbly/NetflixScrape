/* eslint max-len:off */

const fs = require('fs');
const request = require('request');
const https = require('https');
const headers = require('./headers');
let agent = new https.Agent();
agent.maxSockets = 1;

const ALT = true;

let genres;
let dir;
let url_base;
if (ALT) {
  genres = [1167768, 1167769, 1167770, 1167771, 1167772, 1167773, 1167774, 1167775, 1167776, 1167777, 1167778, 1167779, 1167780, 1167782, 1167783, 1167784, 1167785, 1167786, 1167787, 1167788, 1167789, 1167790, 1167791, 1167792, 1173706, 1173707, 1173708, 1173709, 1173710, 1173718, 1173719, 1173734, 1173735];
  dir = 'moods';
  url_base = 'https://portal.dvd.netflix.com/titles/altgenre?altGenreId=GENRE_ID&max_results=300&excludedFilters=Format&sortType=ds&isSortAscending=false&returnFilters=true';
} else {
  genres = [296, 623, 302, 306, 307, 864, 315, 2108, 2514, 338, 343, 330, 2310, 371, 373, 2223, 2190, 2197, 387, 615, 616, 618, 1330, 2256, 2414, 627, 642, 643, 650, 1419, 2500, 1288, 672, 679, 1289, 390, 1326, 1146, 1150, 1149, 1148, 1098, 1153, 1147, 1152, 1151, 2050, 2054, 2051, 2052, 2053, 619, 634, 620, 1179, 1386, 651, 2691, 318, 1173, 1325, 656, 657, 841, 1385, 1372, 1087, 1088, 385, 1126, 712, 621, 758, 637, 638, 639, 640, 333, 324, 2485, 2492, 2484, 2493, 702, 2372, 635, 748, 626, 2204, 847, 2274, 1194, 747, 692, 696, 699, 1016, 1338, 706, 2421, 381, 2373, 300, 652, 857, 2129, 2130, 2426, 2590, 1409, 653, 1318, 856, 654, 1194, 1412, 1319, 2410, 858, 1321, 2451, 1320, 2374, 314, 758, 311, 312, 1293, 1291, 2609, 2607, 2608, 841, 2494, 2611, 677, 667, 2113, 2610, 680, 796, 2612, 2613, 684, 693, 701, 1206, 2422, 711, 857, 2129, 2130, 2426, 2109, 2112, 2110, 2425, 2111, 2115, 2400, 2116, 2402, 2394, 2117, 1132, 2061, 2118, 2121, 2122, 2124, 2123, 2125, 2527, 2500, 2487, 2499, 2485, 2492, 2484, 2493, 2204, 2590, 2494, 2205, 2496, 2497, 2495, 2620, 2545, 2547, 2548, 2549, 2550, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2591, 2560, 2561, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2580, 2404, 2498, 2621, 2218, 2358, 2515, 2516, 2517, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2419, 2594, 2502, 2215, 2216, 745, 644, 1296, 2205, 2496, 2497, 665, 673, 834, 695, 703, 710, 713, 717, 718, 719, 648, 2487, 674, 675, 676, 677, 1335, 1336, 1337, 1345, 2495, 1433, 1335, 666, 667, 2618, 1344, 668, 2311, 2330, 2331, 2337, 2394, 2439, 2352, 2440, 2441, 2115, 2400, 2116, 2402, 2394, 2117, 2313, 2370, 1193, 1100, 1230, 2340, 2339, 2403, 2399, 2333, 2370, 2332, 2334, 2336, 2321, 2335, 2315, 2323, 2324, 2325, 2348, 2327, 2328, 2316, 2341, 2342, 2350, 2351, 2404, 2366, 2405, 2317, 2408, 2360, 2406, 2409, 2364, 2407, 797, 2359, 2410, 2365, 2367, 2436, 2368, 2437, 2411, 2361, 2412, 2312, 2355, 2378, 2320, 2319, 2353, 2318, 2354, 2375, 2419, 2594, 1336, 691, 692, 693, 709, 617, 622, 637, 323, 2502, 1328, 1285, 1420, 1327, 757, 1329, 2416, 2237, 2238, 2236, 2240, 2225, 2259, 2243, 2245, 2456, 2246, 2247, 2242, 2258, 2415, 2254, 2253, 2255, 2309, 2177, 2165, 2173, 2179, 2260, 2427, 2233, 2294, 2277, 2357, 2264, 2266, 2192, 2267, 2268, 2231, 2269, 2270, 340, 2232, 2124, 2278, 2123, 2279, 2249, 341, 2235, 2342, 2351, 2337, 2293, 2296, 2295, 2395, 2460, 2397, 2139, 2140, 2138, 2141, 2147, 2174, 2146, 2152, 2144, 2396, 2447, 2307, 2154, 2140, 2155, 2156, 2157, 2186, 2136, 2458, 2148, 2356, 2158, 2165, 2138, 2159, 2168, 2170, 2167, 2169, 2163, 2137, 2172, 2173, 2179, 2174, 2146, 2161, 2141, 2448, 2164, 2449, 2450, 2166, 2420, 2421, 2451, 2422, 2424, 2452, 2453, 2177, 2178, 2454, 2455, 2183, 2184, 2456, 2329, 2180, 2250, 2186, 2150, 2457, 2151, 2458, 2459, 2221, 2198, 2222, 1087, 1272, 2210, 2211, 2212, 2214, 2213, 2471, 2472, 2473, 2474, 2475, 1312, 1409, 1412, 1311, 2470, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 1090, 2501, 2619, 1091, 1273, 1451, 2751, 2711, 1092, 2510, 1275, 2509, 1089, 1302, 1097, 2512, 1453, 1446, 1094, 2731, 1279, 1462, 2618, 1463, 1095, 1280, 1096, 1455, 1088, 1093, 1282, 1456, 1466, 2511, 1283, 1467, 1468, 1459, 2486, 2488, 2489, 2490, 2491, 618, 638, 646, 320, 705, 2216, 1337, 681, 357, 1349, 685, 757, 730, 358];
  dir = 'genres';
  url_base = 'https://portal.dvd.netflix.com/titles/genre?genreId=GENRE_ID&max_results=300&excludedFilters=Genre%2CFormat&sortType=ds&isSortAscending=false&returnFilters=true';
}

if (!fs.existsSync('data')) {
  fs.mkdirSync('data');
}
if (!fs.existsSync(`data/${dir}`)) {
  fs.mkdirSync(`data/${dir}`);
}

let movie_ids = {};
let all_ids = {};

function getGenre(id, page, next) {
  let filename = `data/${dir}/${id}.json`;
  if (fs.existsSync(filename)) {
    let data = JSON.parse(fs.readFileSync(filename, 'utf8'));
    for (let ii = 0; ii < data.ids.length; ++ii) {
      all_ids[data.ids[ii]] = 1;
    }
    console.log(`Genre ${id} (${data.name}) skipped (${data.ids.length} movies found previously)`);
    return next();
  }
  let url = url_base.replace('GENRE_ID', id);
  if (page > 1) {
    url += `&pageNum=${page}`;
  }
  request({
    url,
    json: true,
    headers,
    agent,
  }, function (err, res) {
    if (!err && res && (res.statusCode !== 200 || !res.body.movies)) {
      err = `Error: statusCode=${res.statusCode} body=${JSON.stringify(res.body)}`;
    }
    if (err) {
      console.error(`Error getting ${id}: ${err}`);
      return void next();
    }
    let { body } = res;
    let { totalPages, movies } = body;
    for (let ii = 0; ii < movies.length; ++ii) {
      movie_ids[movies[ii].id] = 1;
    }
    console.log(`Genre ${id} (${body.name}) ${page} / ${totalPages}`);
    if (page >= totalPages) {
      fs.writeFileSync(filename, JSON.stringify({
        name: body.name,
        ids: Object.keys(movie_ids),
      }));
      all_ids = {
        ...all_ids,
        ...movie_ids,
      };
      movie_ids = {};
      setTimeout(next, 1000);
    } else {
      setTimeout(function () {
        getGenre(id, page + 1, next);
      }, 500);
    }
  });
}

let idx = -1;
function pump() {
  ++idx;
  if (idx === genres.length) {
    fs.writeFileSync(`data/${dir}/all.json`, JSON.stringify({
      name: 'all',
      ids: Object.keys(all_ids),
    }));
    console.log('Done.');
  } else {
    getGenre(genres[idx], 1, pump);
  }
}

pump();